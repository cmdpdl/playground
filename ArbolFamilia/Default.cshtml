@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Home Page";
}
<table style="width:100%" id="body2">
    <tr>
        <th style="width:25%">
            Nacimiento<input type="radio" name="item" value="nacimiento" onclick="showGraph('nacimiento');" checked="checked">
        </th>
        <th style="width:25%">
            Telefono<input type="radio" name="item" value="Telefono" onclick="showGraph('telefono');">
        </th>
        <th style="width:25%">
            Profesion<input type="radio" name="item" value="Occupation" onclick="showGraph('occupation');">
        </th>
        <th style="width:25%">
            Esposo/a<input type="radio" name="item" value="Consorte" onclick="showGraph('consorte');">
        </th>
        <th style="width:25%">
            Todo<input type="radio" name="item" value="Todo" onclick="showGraph('todo');">
        </th>
    </tr>
</table>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>
    function showGraph(option) {

        var margin = { top: 20, right: 100, bottom: 20, left: 100 },
            width = 960 - margin.right - margin.left,
            height = 1200 - margin.top - margin.bottom;

        var i = 0,
            duration = 750,
            root;

        var tree = d3.layout.tree()
            .size([height, width]);

        var diagonal = d3.svg.diagonal()
            .projection(function (d) { return [d.y, d.x]; });

        if (graphInit) {
            d3.selectAll('svg').remove();
        }

        svg = d3.select("body").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.json("flare.json", function (error, flare) {
            if (error) throw error;

            root = flare;
            root.x0 = height / 2;
            root.y0 = 0;

            function collapse(d) {
                if (d.children) {
                    d._children = d.children;
                    d._children.forEach(collapse);
                    d.children = null;
                }
            }
            //root.children.forEach(collapse);
            update(root);
            graphInit = true;
        });

        d3.select(self.frameElement).style("height", "800px");

        function update(source) {

            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * 180; });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                .on("click", click);

            nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function (d) { return d.children ? "lightsteelblue" : "#fff"; });

            nodeEnter.append("text")
                .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                .attr("dy", "-.40em")
                .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                .text(function (d) { return d.name; })
                .style("fill-opacity", 1);

            switch (option) {
                case ("nacimiento"):
                    nodeEnter.append("text")
                        .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                        .attr("dy", ".40em")
                        .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                        .text(function (d) { return d.DOB; })
                        .style("fill-opacity", 2)
                        .style("font", "8px sans-serif");
                    break;
                case ("telefono"):
                    nodeEnter.append("text")
                        .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                        .attr("dy", ".40em")
                        .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                        .text(function (d) { return d.tel; })
                        .style("fill-opacity", 2)
                        .style("font", "8px sans-serif");
                    break;
                case ("consorte"):
                    nodeEnter.append("text")
                        .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                        .attr("dy", ".40em")
                        .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                        .text(function (d) { return d.spouse; })
                        .style("fill-opacity", 2)
                        .style("font", "11px sans-serif");
                    break;
                case ("occupation"):
                    nodeEnter.append("text")
                        .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                        .attr("dy", ".40em")
                        .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                        .text(function (d) { return d.occ; })
                        .style("fill-opacity", 2)
                        .style("font", "8px sans-serif");
                    break;
                case ("todo"):
                    var delta = -0.1;
                    nodeEnter.filter(function (d) { return d.DOB != null })
                        .append("text")
                            .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                            .attr("dy", function (d) {
                                return delta + 0.4 + "em";
                            })
                            .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                            .text(function (d) { return d.DOB; })
                            .style("fill-opacity", 2)
                            .style("font", "8px sans-serif");
                    //nodeEnter.filter(function (d) { return (d.occ != null) })
                    //    .append("text")
                    //        .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                    //        .attr("dy", function (d) {
                    //            return delta + 1.2 + "em";
                    //        })
                    //        .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                    //        .text(function (d) { return d.occ; })
                    //        .style("fill-opacity", 2)
                    //        .style("font", "8px sans-serif");
                    nodeEnter.filter(function (d) { return d.spouse != null })
                        .append("text")
                            .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                            .attr("dy", function (d) {
                                return delta + 1.2 + "em";
                            })
                            .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                            .text(function (d) { return d.spouse; })
                            .style("fill-opacity", 2)
                            .style("font", "10px sans-serif");
                    nodeEnter.filter(function (d) { return d.tel != null })
                        .append("text")
                            .attr("x", function (d) { return d.children || d._children ? -10 : 10; })
                            .attr("dy", function (d) {
                                return delta + 2.4 + "em";
                            })
                            .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                            .text(function (d) { return d.tel; })
                            .style("fill-opacity", 2)
                            .style("font", "8px sans-serif");
                    break;
            }
            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + d.y + "," + d.x + ")"; });

            nodeUpdate.select("circle")
                .attr("r", 4.5)
                .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + source.y + "," + source.x + ")"; })
                .remove();

            nodeExit.select("circle")
                .attr("r", 1e-6);

            nodeExit.select("text")
                .style("fill-opacity", 1e-6);

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function (d) {
                    var o = { x: source.x0, y: source.y0 };
                    return diagonal({ source: o, target: o });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = { x: source.x, y: source.y };
                    return diagonal({ source: o, target: o });
                })
                .remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }

        // Toggle children on click.
        function click(d) {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            update(d);
        }
    };

    var graphInit = false;
    var svg;
    showGraph("nacimiento");

</script>
